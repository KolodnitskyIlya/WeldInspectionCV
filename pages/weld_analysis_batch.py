import streamlit as st
from PIL import Image
import numpy as np
import cv2
from ultralytics import YOLO
import pandas as pd
from io import StringIO

st.set_page_config(page_title="WeldInspectionCV ‚Äì –ê–Ω–∞–ª–∏–∑ —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–∏—Ö —Å–Ω–∏–º–∫–æ–≤", layout="wide")
st.title("–ü–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–∏—Ö —Å–Ω–∏–º–∫–æ–≤ —Å–≤–∞—Ä–Ω—ã—Ö —à–≤–æ–≤")

# ===================== –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ =====================
def adaptive_contrast_strong(img_gray: np.ndarray) -> np.ndarray:
    """–£—Å–∏–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –∫–æ—Ä—Ä–µ–∫—Ü–∏–µ–π"""
    std = np.std(img_gray)
    if std < 40:
        gamma = 0.6
    elif std < 70:
        gamma = 1.0
    else:
        gamma = 1.4
    img_gamma = np.array(255 * (img_gray / 255) ** gamma, dtype=np.uint8)
    clahe = cv2.createCLAHE(clipLimit=3.0, tileGridSize=(8, 8))
    img_clahe = clahe.apply(img_gamma)
    img_norm = cv2.normalize(img_clahe, None, 0, 255, cv2.NORM_MINMAX)
    return img_norm


def preprocess_image(uploaded_file, target_size=(640, 640)):
    """–ü–æ–ª–Ω–∞—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    img = Image.open(uploaded_file).convert("L")
    img_np = np.array(img)
    img_contrasted = adaptive_contrast_strong(img_np)
    img_resized = cv2.resize(img_contrasted, target_size)
    img_for_model = cv2.cvtColor(img_resized, cv2.COLOR_GRAY2BGR).astype(np.uint8)
    return img_for_model

# ===================== –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ =====================
@st.cache_resource
def load_model(path="best.pt"):
    return YOLO(path)

model = load_model("best.pt")

# ===================== –ö–ª–∞—Å—Å—ã –¥–µ—Ñ–µ–∫—Ç–æ–≤ =====================
CLASS_DICT = {
    0: '–ø–æ—Ä–∞',
    1: '–≤–∫–ª—é—á–µ–Ω–∏–µ',
    2: '–ø–æ–¥—Ä–µ–∑',
    3: '—ç—Ç–∞–ª–æ–Ω1',
    4: '—ç—Ç–∞–ª–æ–Ω2',
    5: '—É—Ç—è–∂–∏–Ω–∞',
    6: '–Ω–µ—Å–ø–ª–∞–≤–ª–µ–Ω–∏–µ',
    7: '–Ω–µ–ø—Ä–æ–≤–∞—Ä –∫–æ—Ä–Ω—è'
}

# ===================== –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã (–º–º) =====================
DEFAULT_LIMITS = {
    '–ø–æ—Ä–∞': {'diameter': {'ok': 1.5, 'reject': 3.0}},
    '–≤–∫–ª—é—á–µ–Ω–∏–µ': {'length': {'ok': 3.0, 'reject': 5.0}, 'width': {'ok': 0.5, 'reject': 1.0}},
    '–ø–æ–¥—Ä–µ–∑': {'depth': {'ok': 0.5, 'reject': 1.0}},
    '–Ω–µ—Å–ø–ª–∞–≤–ª–µ–Ω–∏–µ': {'length': {'ok': 10.0, 'reject': 25.0}},
    '–Ω–µ–ø—Ä–æ–≤–∞—Ä –∫–æ—Ä–Ω—è': {'length': {'ok': 10.0, 'reject': 25.0}},
    '—ç—Ç–∞–ª–æ–Ω1': {},
    '—ç—Ç–∞–ª–æ–Ω2': {},
    '—É—Ç—è–∂–∏–Ω–∞': {}
}

# ===================== –õ–æ–≥–∏–∫–∞ –æ—Ü–µ–Ω–∫–∏ –¥–µ—Ñ–µ–∫—Ç–æ–≤ =====================
def classify_defect(defect_type, area, length, width, limits):
    if defect_type not in limits:
        return "–ù–µ—Ç –Ω–æ—Ä–º—ã", 0.5
    rule = limits[defect_type]
    if defect_type == '–ø–æ—Ä–∞':
        diameter = (4 * area / np.pi) ** 0.5
        ok, reject = rule['diameter']['ok'], rule['diameter']['reject']
        if diameter <= ok:
            return "–î–æ–ø—É—Å—Ç–∏–º–æ", 0.0
        elif diameter > reject:
            return "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ", 1.0
        else:
            closeness = (diameter - ok) / (reject - ok)
            return "–¢—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏", closeness
    elif defect_type == '–≤–∫–ª—é—á–µ–Ω–∏–µ':
        ok_L, reject_L = rule['length']['ok'], rule['length']['reject']
        ok_W, reject_W = rule['width']['ok'], rule['width']['reject']
        if length <= ok_L and width <= ok_W:
            return "–î–æ–ø—É—Å—Ç–∏–º–æ", 0.0
        elif length > reject_L or width > reject_W:
            return "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ", 1.0
        else:
            closeness_L = (length - ok_L) / (reject_L - ok_L)
            closeness_W = (width - ok_W) / (reject_W - ok_W)
            return "–¢—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏", max(closeness_L, closeness_W)
    elif defect_type == '–ø–æ–¥—Ä–µ–∑':
        ok, reject = rule['depth']['ok'], rule['depth']['reject']
        if width <= ok:
            return "–î–æ–ø—É—Å—Ç–∏–º–æ", 0.0
        elif width > reject:
            return "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ", 1.0
        else:
            return "–¢—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏", (width - ok) / (reject - ok)
    elif defect_type in ['–Ω–µ—Å–ø–ª–∞–≤–ª–µ–Ω–∏–µ', '–Ω–µ–ø—Ä–æ–≤–∞—Ä –∫–æ—Ä–Ω—è']:
        ok, reject = rule['length']['ok'], rule['length']['reject']
        if length <= ok:
            return "–î–æ–ø—É—Å—Ç–∏–º–æ", 0.0
        elif length > reject:
            return "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ", 1.0
        else:
            return "–¢—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏", (length - ok) / (reject - ok)
    elif defect_type in ['—ç—Ç–∞–ª–æ–Ω1', '—ç—Ç–∞–ª–æ–Ω2', '—ç—Ç–∞–ª–æ–Ω3']:
        return "–î–æ–ø—É—Å—Ç–∏–º–æ", 0.0
    elif defect_type == '—Ç—Ä–µ—â–∏–Ω–∞':
        return "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ", 1.0
    return "–ù–µ—Ç –Ω–æ—Ä–º—ã", 0.5

# ===================== –û—Ü–µ–Ω–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ YOLO =====================
def evaluate_defects(yolo_output, limits=DEFAULT_LIMITS):
    results_eval = []
    for box in yolo_output:
        xyxy = box.xyxy.cpu().numpy()[0]
        length = xyxy[2] - xyxy[0]
        width = xyxy[3] - xyxy[1]
        area = length * width
        defect_type = CLASS_DICT.get(int(box.cls.cpu().numpy()[0]), "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        severity, closeness = classify_defect(defect_type, area, length, width, limits)
        results_eval.append({
            "–¢–∏–ø –¥–µ—Ñ–µ–∫—Ç–∞": defect_type,
            "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å": float(box.conf.cpu().numpy()[0]),
            "–°—Ç–∞—Ç—É—Å": severity,
            "–°–µ—Ä—å—ë–∑–Ω–æ—Å—Ç—å": closeness
        })
    return pd.DataFrame(results_eval)

# ===================== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ =====================
st.sidebar.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞")
conf_thresh = st.sidebar.slider("–ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏", 0.0, 1.0, 0.25)
iou_thresh = st.sidebar.slider("–ü–æ—Ä–æ–≥ IoU", 0.0, 1.0, 0.45)

# ===================== –ü–∞–∫–µ—Ç–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π =====================
uploaded_files = st.file_uploader(
    "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–∏—Ö —Å–Ω–∏–º–∫–æ–≤",
    type=["jpg", "jpeg", "png"],
    accept_multiple_files=True
)

if uploaded_files:
    st.info(f"{len(uploaded_files)} —Ñ–∞–π–ª–æ–≤ –≤—ã–±—Ä–∞–Ω–æ.")
    if st.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑"):
        batch_results = []
        with st.spinner("–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π... ‚è≥"):
            for file in uploaded_files:
                # === –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ ===
                img_for_model = preprocess_image(file)

                # === –ê–Ω–∞–ª–∏–∑ YOLO ===
                results = model.predict(img_for_model, imgsz=640, conf=conf_thresh, iou=iou_thresh)
                detections = results[0].boxes

                if len(detections) == 0:
                    verdict = "‚úÖ –î–æ–ø—É—Å—Ç–∏–º–æ (–¥–µ—Ñ–µ–∫—Ç—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã)"
                    defect_count = 0
                else:
                    df_eval = evaluate_defects(detections)
                    defect_count = len(df_eval)
                    if any(df_eval["–°—Ç–∞—Ç—É—Å"] == "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ"):
                        verdict = "‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ"
                    else:
                        verdict = "‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ / –î–æ–ø—É—Å—Ç–∏–º–æ"

                batch_results.append({
                    "–ò–º—è —Ñ–∞–π–ª–∞": file.name,
                    "–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–µ—Ñ–µ–∫—Ç—ã": defect_count,
                    "–í–µ—Ä–¥–∏–∫—Ç": verdict
                })

        df_batch = pd.DataFrame(batch_results)
        st.success("–ü–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω!")

        st.dataframe(df_batch, use_container_width=True)

        # ===================== –°–≤–æ–¥–∫–∞ + –ó–∞–≥—Ä—É–∑–∫–∞ CSV =====================
        total_files = len(df_batch)
        unacceptable = sum(df_batch["–í–µ—Ä–¥–∏–∫—Ç"].str.contains("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ"))
        avg_defects = df_batch["–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–µ—Ñ–µ–∫—Ç—ã"].mean()

        col1, col2 = st.columns([2, 1])
        with col1:
            st.subheader("–°–≤–æ–¥–∫–∞")
            st.markdown(f"- **–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤:** {total_files}")
            st.markdown(f"- **–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ñ–µ–∫—Ç–æ–≤ –Ω–∞ —Ñ–∞–π–ª:** {avg_defects:.2f}")
            st.markdown(f"- **–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:** {unacceptable} ({unacceptable / total_files * 100:.1f}%)")

        with col2:
            csv_buffer = StringIO()
            df_batch.to_csv(csv_buffer, index=False)
            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å CSV",
                data=csv_buffer.getvalue(),
                file_name="batch_analysis_results.csv",
                mime="text/csv",
                use_container_width=True
            )
